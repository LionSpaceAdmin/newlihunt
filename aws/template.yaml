AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Scam Hunt Platform - AWS Infrastructure

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    Environment:
      Variables:
        DYNAMODB_TABLE_NAME: !Ref AnalysisHistoryTable
        S3_BUCKET_NAME: !Ref UploadsBucket
        IP_SALT: !Ref IPSalt
        FEEDBACK_TABLE_NAME: !Ref FeedbackTable
        RATE_LIMIT_TABLE: !Ref RateLimitTable
        SECURITY_LOG_GROUP: !Ref SecurityLogGroup

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

  GeminiApiKey:
    Type: String
    NoEcho: true
    Description: Google Gemini API Key

  IPSalt:
    Type: String
    NoEcho: true
    Default: default-salt-change-in-production
    Description: Salt for IP hashing

Resources:
  # REST API Gateway
  ScamHuntApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      ThrottleConfig:
        RateLimit: 100
        BurstLimit: 200
      RequestValidators:
        RequestValidator:
          ValidateRequestBody: true
          ValidateRequestParameters: true
      Models:
        AnalyzeRequestModel:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              minLength: 1
              maxLength: 10000
            imageBase64:
              type: string
            imageMimeType:
              type: string
              enum: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true

  # WebSocket API for streaming responses
  ScamHuntWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-websocket'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'
      Description: WebSocket API for real-time scam analysis streaming

  # WebSocket Deployment
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi

  # WebSocket Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Environment
      Description: !Sub 'WebSocket stage for ${Environment}'
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref ScamHuntWebSocketApi
      ThrottleSettings:
        RateLimit: 100
        BurstLimit: 200

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${ConnectIntegration}'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${DisconnectIntegration}'

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi
      RouteKey: analyze
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MessageIntegration}'

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ScamHuntWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageFunction.Arn}/invocations'

  # Lambda Functions
  AnalyzeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/analyze/
      Handler: index.handler
      Environment:
        Variables:
          GEMINI_API_KEY: !Ref GeminiApiKey
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RateLimitTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub '${SecurityLogGroup}*'
      Events:
        AnalyzeApi:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /analyze
            Method: post
        AnalyzeOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /analyze
            Method: options

  HistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/history/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysisHistoryTable
      Events:
        HistoryGetApi:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /history
            Method: get
        HistoryPostApi:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /history
            Method: post
        HistoryOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /history
            Method: options

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/upload/
      Handler: index.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref RateLimitTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub '${SecurityLogGroup}*'
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /upload
            Method: post
        UploadOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /upload
            Method: options

  URLInspectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/url-inspector/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RateLimitTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub '${SecurityLogGroup}*'
      Events:
        URLInspectorApi:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /url-inspector
            Method: post
        URLInspectorOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /url-inspector
            Method: options

  FeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/feedback/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
      Events:
        FeedbackApi:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /feedback
            Method: post
        FeedbackOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ScamHuntApi
            Path: /feedback
            Method: options

  # WebSocket Lambda Functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websocket-connect/
      Handler: index.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websocket-disconnect/
      Handler: index.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  WebSocketMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websocket-message/
      Handler: index.handler
      Timeout: 60
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
          WEBSOCKET_ENDPOINT: !Sub 'https://${ScamHuntWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
          GEMINI_API_KEY: !Ref GeminiApiKey
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScamHuntWebSocketApi}/*'

  # Lambda Permissions for WebSocket
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScamHuntWebSocketApi}/*'

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScamHuntWebSocketApi}/*'

  WebSocketMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScamHuntWebSocketApi}/*'

  # DynamoDB Table
  AnalysisHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'scam-hunt-history-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # WebSocket Connections Table
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'scam-hunt-connections-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'scam-hunt-feedback-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: analysisId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: analysisId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  # Rate Limiting Table
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'scam-hunt-rate-limits-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Bucket for uploads
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'scam-hunt-uploads-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldUploads
            Status: Enabled
            ExpirationInDays: 30
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, POST, PUT]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # CloudFront Distribution for S3
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt UploadsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
        Enabled: true
        Comment: !Sub 'Scam Hunt Platform - ${Environment}'

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for Scam Hunt Platform - ${Environment}'

  # Bucket Policy for CloudFront
  UploadsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UploadsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub '${UploadsBucket}/*'

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ScamHuntApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontUrl'

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref AnalysisHistoryTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'

  S3BucketName:
    Description: S3 bucket name
    Value: !Ref UploadsBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  WebSocketUrl:
    Description: WebSocket API endpoint URL
    Value: !Sub 'wss://${ScamHuntWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketUrl'

  ConnectionsTableName:
    Description: WebSocket connections table name
    Value: !Ref ConnectionsTable
    Export:
      Name: !Sub '${AWS::StackName}-ConnectionsTable'

  FeedbackTableName:
    Description: Feedback table name
    Value: !Ref FeedbackTable
    Export:
      Name: !Sub '${AWS::StackName}-FeedbackTable'

  # CloudWatch Resources
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/scam-hunt-${Environment}'
      RetentionInDays: 14

  SecurityLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/scam-hunt-security-${Environment}'
      RetentionInDays: 30

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'ScamHunt-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AnalyzeFunction}" ],
                  [ ".", "Duration", ".", "." ],
                  [ ".", "Errors", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Analyze Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${FeedbackFunction}" ],
                  [ ".", "Duration", ".", "." ],
                  [ ".", "Errors", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Feedback Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ScamHuntApi}" ],
                  [ ".", "Latency", ".", "." ],
                  [ ".", "4XXError", ".", "." ],
                  [ ".", "5XXError", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${AnalysisHistoryTable}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "DynamoDB Capacity"
              }
            }
          ]
        }

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'ScamHunt-${Environment}-HighErrorRate'
      AlarmDescription: 'High error rate detected'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyzeFunction
        - Name: FunctionName
          Value: !Ref FeedbackFunction
      AlarmActions:
        - !Ref ErrorNotificationTopic

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'ScamHunt-${Environment}-HighLatency'
      AlarmDescription: 'High API latency detected'
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref ScamHuntApi

  # SNS Topic for notifications
  ErrorNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'scam-hunt-errors-${Environment}'
      DisplayName: 'Scam Hunt Platform Errors'
